{"ast":null,"code":"import _regeneratorRuntime from \"/home/luan/Documentos/ignitemodulo4/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/luan/Documentos/ignitemodulo4/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { api } from \"../../services/api\";\nexport function getUsers(_x) {\n  return _getUsers.apply(this, arguments);\n}\n\nfunction _getUsers() {\n  _getUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(page) {\n    var _yield$api$get, data, headers, totalCount, users;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return api.get('users', {\n              params: {\n                page: page\n              }\n            });\n\n          case 2:\n            _yield$api$get = _context.sent;\n            data = _yield$api$get.data;\n            headers = _yield$api$get.headers;\n            totalCount = Number(headers['x-total-count']);\n            users = data.users.map(function (user) {\n              return {\n                id: user.id,\n                name: user.name,\n                email: user.email,\n                createdAt: new Date(user.createdAt).toLocaleDateString('pt-BR', {\n                  day: '2-digit',\n                  month: 'long',\n                  year: 'numeric'\n                })\n              };\n            });\n            return _context.abrupt(\"return\", {\n              users: users,\n              totalCount: totalCount\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getUsers.apply(this, arguments);\n}\n\nexport function useUsers(page) {\n  _s();\n\n  return useQuery(['users', page], function () {\n    return getUsers(page);\n  }, {\n    staleTime: 1000 * 5\n  });\n}\n\n_s(useUsers, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/home/luan/Documentos/ignitemodulo4/src/services/hooks/useUsers.ts"],"names":["useQuery","api","getUsers","page","get","params","data","headers","totalCount","Number","users","map","user","id","name","email","createdAt","Date","toLocaleDateString","day","month","year","useUsers","staleTime"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAwB,aAAxB;AACA,SAASC,GAAT,QAAoB,oBAApB;AAgBA,gBAAsBC,QAAtB;AAAA;AAAA;;;uEAAO,iBAAwBC,IAAxB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE0BF,GAAG,CAACG,GAAJ,CAAQ,OAAR,EAAgB;AACzCC,cAAAA,MAAM,EAAE;AACJF,gBAAAA,IAAI,EAAJA;AADI;AADiC,aAAhB,CAF1B;;AAAA;AAAA;AAEIG,YAAAA,IAFJ,kBAEIA,IAFJ;AAESC,YAAAA,OAFT,kBAESA,OAFT;AAOOC,YAAAA,UAPP,GAOoBC,MAAM,CAACF,OAAO,CAAC,eAAD,CAAR,CAP1B;AASOG,YAAAA,KATP,GASeJ,IAAI,CAACI,KAAL,CAAWC,GAAX,CAAe,UAAAC,IAAI,EAAG;AAChC,qBAAO;AACHC,gBAAAA,EAAE,EAACD,IAAI,CAACC,EADL;AAEHC,gBAAAA,IAAI,EAACF,IAAI,CAACE,IAFP;AAGHC,gBAAAA,KAAK,EAACH,IAAI,CAACG,KAHR;AAIHC,gBAAAA,SAAS,EAAC,IAAIC,IAAJ,CAASL,IAAI,CAACI,SAAd,EAAyBE,kBAAzB,CAA4C,OAA5C,EAAoD;AAC1DC,kBAAAA,GAAG,EAAC,SADsD;AAE1DC,kBAAAA,KAAK,EAAC,MAFoD;AAG1DC,kBAAAA,IAAI,EAAC;AAHqD,iBAApD;AAJP,eAAP;AAYH,aAba,CATf;AAAA,6CAwBQ;AACHX,cAAAA,KAAK,EAALA,KADG;AAEHF,cAAAA,UAAU,EAAVA;AAFG,aAxBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA+BH,OAAO,SAASc,QAAT,CAAmBnB,IAAnB,EAAgC;AAAA;;AACnC,SAAOH,QAAQ,CAAE,CAAC,OAAD,EAASG,IAAT,CAAF,EAAiB;AAAA,WAAMD,QAAQ,CAACC,IAAD,CAAd;AAAA,GAAjB,EAAsC;AACrDoB,IAAAA,SAAS,EAAC,OAAK;AADsC,GAAtC,CAAf;AAIP;;GALmBD,Q;UACLtB,Q","sourcesContent":["import { useQuery} from \"react-query\";\nimport { api } from \"../../services/api\";\n\n\ntype User = {\n    id:string;\n    name:string;\n    email:string;\n    createdAt:string;\n}\n\ntype GetUsersResponse = {\n    totalCount:number;\n    users:User[];\n\n}\n\nexport async function getUsers(page:number):Promise<GetUsersResponse> {\n\n    const {data,headers} = await api.get('users',{\n        params: {\n            page,\n        }\n    })\n        const totalCount = Number(headers['x-total-count'])\n\n        const users = data.users.map(user=> {\n            return {\n                id:user.id,\n                name:user.name,\n                email:user.email,\n                createdAt:new Date(user.createdAt).toLocaleDateString('pt-BR',{\n                    day:'2-digit',\n                    month:'long',\n                    year:'numeric',\n                })\n             \n            };\n\n        })\n       \n        return {\n            users,\n            totalCount,\n        }\n\n    }\n    \n    export function useUsers (page:number) {\n        return useQuery (['users',page],() => getUsers(page),{\n        staleTime:1000*5,\n    })\n  \n}\n"]},"metadata":{},"sourceType":"module"}