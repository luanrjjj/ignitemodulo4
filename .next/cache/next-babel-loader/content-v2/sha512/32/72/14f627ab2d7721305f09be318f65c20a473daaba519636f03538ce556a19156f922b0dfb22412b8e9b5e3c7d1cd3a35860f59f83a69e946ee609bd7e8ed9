{"ast":null,"code":"import { createServer, Factory, Model, Response } from 'miragejs';\nimport faker from 'faker';\nexport function makeServer() {\n  const server = createServer({\n    models: {\n      user: Model.extend({})\n    },\n    factories: {\n      user: Factory.extend({\n        name(i) {\n          return `User${i + 1}`;\n        },\n\n        email() {\n          return faker.internet.email().toLowerCase();\n        },\n\n        createdAt() {\n          return faker.date.recent(200);\n        }\n\n      })\n    },\n\n    seeds(server) {\n      server.createList('user', 200);\n    },\n\n    routes() {\n      this.namespace = 'api';\n      this.timing = 750;\n      this.get('/users', function (schema, request) {\n        const {\n          page = 1,\n          per_page = 10\n        } = request.queryParams;\n        const total = schema.all('user').length;\n        const pageStart = (Number(page) - 1) * Number(per_page);\n        const pageEnd = pageStart + Number(per_page);\n        const users = this.serialize(schema.all('user')).users.slice(pageStart, pageEnd);\n        return new Response(200, {\n          'x-total-count': String(total)\n        }, {\n          users\n        });\n      });\n      this.post('/users');\n      this.namespace = '';\n      this.passthrough();\n    }\n\n  });\n  return server;\n}","map":{"version":3,"sources":["/home/luan/Documentos/ignitemodulo4/src/services/mirage/index.ts"],"names":["createServer","Factory","Model","Response","faker","makeServer","server","models","user","extend","factories","name","i","email","internet","toLowerCase","createdAt","date","recent","seeds","createList","routes","namespace","timing","get","schema","request","page","per_page","queryParams","total","all","length","pageStart","Number","pageEnd","users","serialize","slice","String","post","passthrough"],"mappings":"AAAA,SAASA,YAAT,EAAsBC,OAAtB,EAA8BC,KAA9B,EAAoCC,QAApC,QAAmD,UAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAOA,OAAO,SAASC,UAAT,GAAsB;AACzB,QAAMC,MAAM,GAAGN,YAAY,CAAC;AACxBO,IAAAA,MAAM,EAAE;AACLC,MAAAA,IAAI,EAAEN,KAAK,CAACO,MAAN,CAA4B,EAA5B;AADD,KADgB;AAIxBC,IAAAA,SAAS,EAAE;AACPF,MAAAA,IAAI,EAACP,OAAO,CAACQ,MAAR,CAAe;AAChBE,QAAAA,IAAI,CAACC,CAAD,EAAG;AACH,iBAAQ,OAAMA,CAAC,GAAC,CAAE,EAAlB;AACH,SAHe;;AAIhBC,QAAAA,KAAK,GAAE;AACH,iBAAOT,KAAK,CAACU,QAAN,CAAeD,KAAf,GAAuBE,WAAvB,EAAP;AAEH,SAPe;;AAQhBC,QAAAA,SAAS,GAAE;AACP,iBAAOZ,KAAK,CAACa,IAAN,CAAWC,MAAX,CAAkB,GAAlB,CAAP;AACH;;AAVe,OAAf;AADE,KAJa;;AAkBxBC,IAAAA,KAAK,CAACb,MAAD,EAAS;AACVA,MAAAA,MAAM,CAACc,UAAP,CAAkB,MAAlB,EAAyB,GAAzB;AAEH,KArBuB;;AAsBxBC,IAAAA,MAAM,GAAE;AACJ,WAAKC,SAAL,GAAiB,KAAjB;AACA,WAAKC,MAAL,GAAc,GAAd;AAGA,WAAKC,GAAL,CAAS,QAAT,EAAkB,UAAUC,MAAV,EAAiBC,OAAjB,EAA0B;AACxC,cAAM;AAACC,UAAAA,IAAI,GAAG,CAAR;AAAUC,UAAAA,QAAQ,GAAG;AAArB,YAA2BF,OAAO,CAACG,WAAzC;AAEA,cAAMC,KAAK,GAAGL,MAAM,CAACM,GAAP,CAAW,MAAX,EAAmBC,MAAjC;AAEA,cAAMC,SAAS,GAAG,CAACC,MAAM,CAACP,IAAD,CAAN,GAAe,CAAhB,IAAmBO,MAAM,CAACN,QAAD,CAA3C;AACA,cAAMO,OAAO,GAAGF,SAAS,GAAGC,MAAM,CAACN,QAAD,CAAlC;AAEA,cAAMQ,KAAK,GAAG,KAAKC,SAAL,CAAeZ,MAAM,CAACM,GAAP,CAAW,MAAX,CAAf,EAAmCK,KAAnC,CAAyCE,KAAzC,CAA+CL,SAA/C,EAAyDE,OAAzD,CAAd;AAEA,eAAO,IAAIhC,QAAJ,CACH,GADG,EAEH;AAAC,2BAAgBoC,MAAM,CAACT,KAAD;AAAvB,SAFG,EAGH;AAAEM,UAAAA;AAAF,SAHG,CAAP;AAMH,OAhBD;AAkBA,WAAKI,IAAL,CAAU,QAAV;AAEA,WAAKlB,SAAL,GAAgB,EAAhB;AACA,WAAKmB,WAAL;AAEH;;AAlDuB,GAAD,CAA3B;AAoDA,SAAOnC,MAAP;AACH","sourcesContent":["import { createServer,Factory,Model,Response} from 'miragejs';\nimport faker from 'faker';\ntype User = {\n    name:string;\n    email:string;\n    created_at:string;\n}\n\nexport function makeServer() {\n    const server = createServer({\n        models: {\n           user: Model.extend<Partial<User>>({}) \n        },\n        factories: { \n            user:Factory.extend({\n                name(i){\n                    return `User${i+1}`\n                },\n                email(){\n                    return faker.internet.email().toLowerCase();\n\n                },\n                createdAt(){\n                    return faker.date.recent(200);\n                }\n            })\n        },\n        seeds(server) {\n            server.createList('user',200)\n\n        },\n        routes(){\n            this.namespace = 'api';\n            this.timing = 750;\n\n\n            this.get('/users',function (schema,request) {\n                const {page = 1,per_page = 10} = request.queryParams\n\n                const total = schema.all('user').length\n\n                const pageStart = (Number(page) - 1)*Number(per_page);\n                const pageEnd = pageStart + Number(per_page);\n\n                const users = this.serialize(schema.all('user')).users.slice(pageStart,pageEnd)\n\n                return new Response (\n                    200, \n                    {'x-total-count':String(total)},\n                    { users }\n\n                )\n            });\n\n            this.post('/users');\n\n            this.namespace= '';\n            this.passthrough();\n            \n        }\n    })\n    return server;\n}"]},"metadata":{},"sourceType":"module"}