{"version":3,"sources":["../../src/use-tabs.ts"],"names":["useTabs","props","defaultIndex","onChange","index","isManual","isLazy","lazyBehavior","orientation","htmlProps","React","useState","focusedIndex","setFocusedIndex","defaultValue","value","selectedIndex","setSelectedIndex","useEffect","enabledDomContext","domContext","id","name","errorMessage","TabsProvider","useTabsContext","useTabList","count","descendants","length","setIndex","useCallback","tab","element","focus","onKeyDown","event","nextTab","prevTab","firstTab","lastTab","isHorizontal","isVertical","eventKey","keyMap","ArrowRight","ArrowLeft","ArrowDown","ArrowUp","Home","End","action","preventDefault","role","useTab","isDisabled","isFocusable","ref","useRef","enabledIndex","disabled","Boolean","focusable","context","current","isSelected","onClick","onFocus","isDisabledButFocusable","shouldSelect","clickableProps","type","makeTabId","tabIndex","makeTabPanelId","undefined","useTabPanels","validChildren","children","map","child","cloneElement","useTabPanel","hasBeenSelected","shouldRenderChildren","hidden","useTabIndicator","left","width","top","height","rect","setRect","hasMeasured","setHasMeasured","tabRect","getBoundingClientRect","requestAnimationFrame","cancelAnimationFrame","position","transition"],"mappings":"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","sourcesContent":["import { useClickable, UseClickableProps } from \"@chakra-ui/clickable\"\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useId,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  createContext,\n  EventKeyMap,\n  getValidChildren,\n  mergeRefs,\n} from \"@chakra-ui/react-utils\"\nimport {\n  callAllHandlers,\n  determineLazyBehavior,\n  Dict,\n  isUndefined,\n  LazyBehavior,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface UseTabsProps {\n  /**\n   * The orientation of the tab list.\n   */\n  orientation?: \"vertical\" | \"horizontal\"\n  /**\n   * If `true`, the tabs will be manually activated and\n   * display its panel by pressing Space or Enter.\n   *\n   * If `false`, the tabs will be automatically activated\n   * and their panel is displayed when they receive focus.\n   */\n  isManual?: boolean\n  /**\n   * Callback when the index (controlled or un-controlled) changes.\n   */\n  onChange?: (index: number) => void\n  /**\n   * The index of the selected tab (in controlled mode)\n   */\n  index?: number\n  /**\n   * The initial index of the selected tab (in uncontrolled mode)\n   */\n  defaultIndex?: number\n  /**\n   * The id of the tab\n   */\n  id?: string\n  /**\n   * Performance 🚀:\n   * If `true`, rendering of the tab panel's will be deferred until it is selected.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of tab panels' content when not active.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The content of inactive tab panels are always unmounted.\n   * - \"keepMounted\": The content of inactive tab panels is initially unmounted,\n   * but stays mounted when selected.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyBehavior\n}\n\n/**\n * Tabs hooks that provides all the states, and accessibility\n * helpers to keep all things working properly.\n *\n * Its returned object will be passed unto a Context Provider\n * so all child components can read from it.\n * There is no document link yet\n * @see Docs https://chakra-ui.com/docs/components/useTabs\n */\nexport function useTabs(props: UseTabsProps) {\n  const {\n    defaultIndex,\n    onChange,\n    index,\n    isManual,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    orientation = \"horizontal\",\n    ...htmlProps\n  } = props\n\n  /**\n   * We use this to keep track of the index of the focused tab.\n   *\n   * Tabs can be automatically activated, this means selection follows focus.\n   * When we navigate with the arrow keys, we move focus and selection to next/prev tab\n   *\n   * Tabs can also be manually activated, this means selection does not follow focus.\n   * When we navigate with the arrow keys, we only move focus NOT selection. The user\n   * will need not manually activate the tab using `Enter` or `Space`.\n   *\n   * This is why we need to keep track of the `focusedIndex` and `selectedIndex`\n   */\n  const [focusedIndex, setFocusedIndex] = React.useState(defaultIndex ?? 0)\n\n  const [selectedIndex, setSelectedIndex] = useControllableState({\n    defaultValue: defaultIndex ?? 0,\n    value: index,\n    onChange,\n  })\n\n  /**\n   * Sync focused `index` with controlled `selectedIndex` (which is the `props.index`)\n   */\n  React.useEffect(() => {\n    if (!isUndefined(index)) {\n      setFocusedIndex(index)\n    }\n  }, [index])\n\n  /**\n   * Think of `useDescendants` as a register for the tab nodes.\n   *\n   * This manager is used to store only the tab nodes that are not disabled, and focusable.\n   * If we have the following code\n   *\n   * ```jsx\n   * <Tab>Tab 1</Tab>\n   * <Tab isDisabled>Tab 2</Tab>\n   * <Tab>Tab 3</Tab>\n   * ```\n   *\n   * The manager will only hold references to \"Tab 1\" and \"Tab 3\", since `Tab 2` is disabled\n   */\n  const enabledDomContext = useDescendants()\n\n  /**\n   * This manager is used to store all tab nodes whether disabled or not.\n   * If we have the following code\n   *\n   * ```jsx\n   * <Tab>Tab 1</Tab>\n   * <Tab isDisabled>Tab 2</Tab>\n   * <Tab>Tab 3</Tab>\n   * ```\n   *\n   * The manager will only hold references to \"Tab 1\", \"Tab 2\" \"Tab 3\".\n   *\n   * We need this for correct indexing of tabs in event a tab is disabled\n   */\n  const domContext = useDescendants()\n\n  /**\n   * generate a unique id or use user-provided id for\n   * the tabs widget\n   */\n  const id = useId(props.id, `tabs`)\n\n  return {\n    id,\n    selectedIndex,\n    focusedIndex,\n    setSelectedIndex,\n    setFocusedIndex,\n    isManual,\n    isLazy,\n    lazyBehavior,\n    orientation,\n    enabledDomContext,\n    domContext,\n    htmlProps,\n  }\n}\n\nexport type UseTabsReturn = Omit<ReturnType<typeof useTabs>, \"htmlProps\">\n\nconst [TabsProvider, useTabsContext] = createContext<UseTabsReturn>({\n  name: \"TabsContext\",\n  errorMessage:\n    \"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />\",\n})\n\nexport { TabsProvider, useTabsContext }\n\ntype Child = React.ReactElement<any>\n\nexport interface UseTabListProps {\n  children?: React.ReactNode\n  onKeyDown?: React.KeyboardEventHandler\n  ref?: React.Ref<any>\n}\n\n/**\n * Tabs hook to manage multiple tab buttons,\n * and ensures only one tab is selected per time.\n *\n * @param props props object for the tablist\n */\nexport function useTabList<P extends UseTabListProps>(props: P) {\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    orientation,\n    enabledDomContext,\n  } = useTabsContext()\n\n  const count = enabledDomContext.descendants.length\n\n  /**\n   * Function to update the selected tab index\n   */\n  const setIndex = React.useCallback(\n    (index: number) => {\n      const tab = enabledDomContext.descendants[index]\n      if (tab?.element) {\n        tab.element.focus()\n        setFocusedIndex(index)\n      }\n    },\n    [enabledDomContext.descendants, setFocusedIndex],\n  )\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const nextTab = () => setIndex((focusedIndex + 1) % count)\n      const prevTab = () => setIndex((focusedIndex - 1 + count) % count)\n      const firstTab = () => setIndex(0)\n      const lastTab = () => setIndex(count - 1)\n\n      const isHorizontal = orientation === \"horizontal\"\n      const isVertical = orientation === \"vertical\"\n\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        ArrowRight: () => isHorizontal && nextTab(),\n        ArrowLeft: () => isHorizontal && prevTab(),\n        ArrowDown: () => isVertical && nextTab(),\n        ArrowUp: () => isVertical && prevTab(),\n        Home: firstTab,\n        End: lastTab,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [count, focusedIndex, orientation, setIndex],\n  )\n\n  return {\n    ...props,\n    role: \"tablist\",\n    \"aria-orientation\": orientation,\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nexport type UseTabListReturn = ReturnType<typeof useTabList>\n\nexport interface UseTabOptions {\n  id?: string\n  isSelected?: boolean\n  panelId?: string\n  /**\n   * If `true`, the `Tab` won't be toggleable\n   */\n  isDisabled?: boolean\n}\n\nexport interface UseTabProps\n  extends Omit<UseClickableProps, \"color\">,\n    UseTabOptions {}\n\n/**\n * Tabs hook to manage each tab button.\n *\n * A tab can be disabled and focusable, or both,\n * hence the use of `useClickable` to handle this scenario\n */\nexport function useTab<P extends UseTabProps>(props: P) {\n  const { isDisabled, isFocusable, ...htmlProps } = props\n\n  const {\n    setSelectedIndex,\n    isManual,\n    id,\n    setFocusedIndex,\n    enabledDomContext,\n    domContext,\n    selectedIndex,\n  } = useTabsContext()\n\n  const ref = React.useRef<HTMLElement>(null)\n\n  /**\n   * Think of `useDescendant` as the function that registers tab node\n   * to the `enabledDomContext`, and returns its index.\n   *\n   * Tab is registered if it is enabled or focusable\n   */\n  const enabledIndex = useDescendant({\n    disabled: Boolean(isDisabled),\n    focusable: Boolean(isFocusable),\n    context: enabledDomContext,\n    element: ref.current,\n  })\n\n  /**\n   * Registers all tabs (whether disabled or not)\n   */\n  const index = useDescendant({\n    context: domContext,\n    element: ref.current,\n  })\n\n  const isSelected = index === selectedIndex\n\n  const onClick = () => {\n    setFocusedIndex(enabledIndex)\n    setSelectedIndex(index)\n  }\n\n  const onFocus = () => {\n    const isDisabledButFocusable = isDisabled && isFocusable\n    const shouldSelect = !isManual && !isDisabledButFocusable\n\n    if (shouldSelect) {\n      setSelectedIndex(index)\n    }\n  }\n\n  const clickableProps = useClickable({\n    ...htmlProps,\n    ref: mergeRefs(ref, props.ref),\n    isDisabled,\n    isFocusable,\n    onClick: callAllHandlers(props.onClick, onClick),\n  })\n\n  const type: \"button\" | \"submit\" | \"reset\" = \"button\"\n\n  return {\n    ...clickableProps,\n    id: makeTabId(id, index),\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    type,\n    \"aria-selected\": isSelected,\n    \"aria-controls\": makeTabPanelId(id, index),\n    onFocus: isDisabled ? undefined : callAllHandlers(props.onFocus, onFocus),\n  }\n}\n\nexport interface UseTabPanelsProps {\n  children?: React.ReactNode\n}\n\n/**\n * Tabs hook for managing the visibility of multiple tab panels.\n *\n * Since only one panel can be show at a time, we use `cloneElement`\n * to inject `selected` panel to each TabPanel.\n *\n * It returns a cloned version of its children with\n * all functionality included.\n */\nexport function useTabPanels<P extends UseTabPanelsProps>(props: P) {\n  const context = useTabsContext()\n\n  const { id, selectedIndex } = context\n\n  const validChildren = getValidChildren(props.children)\n\n  const children = validChildren.map((child, index) =>\n    React.cloneElement(child as Child, {\n      isSelected: index === selectedIndex,\n      id: makeTabPanelId(id, index),\n      // Refers to the associated tab element, and also provides an accessible name to the tab panel.\n      \"aria-labelledby\": makeTabId(id, index),\n    }),\n  )\n\n  return { ...props, children }\n}\n\n/**\n * Tabs hook for managing the visible/hidden states\n * of the tab panel.\n *\n * @param props props object for the tab panel\n */\nexport function useTabPanel(props: Dict) {\n  const { isSelected, id, children, ...htmlProps } = props\n  const { isLazy, lazyBehavior } = useTabsContext()\n\n  const hasBeenSelected = React.useRef(false)\n  if (isSelected) {\n    hasBeenSelected.current = true\n  }\n\n  const shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenSelected.current,\n    isSelected,\n    isLazy,\n    lazyBehavior,\n  })\n\n  return {\n    // Puts the tabpanel in the page `Tab` sequence.\n    tabIndex: 0,\n    ...htmlProps,\n    children: shouldRenderChildren ? children : null,\n    role: \"tabpanel\",\n    hidden: !isSelected,\n    id,\n  }\n}\n\n/**\n * Tabs hook to show an animated indicators that\n * follows the active tab.\n *\n * The way we do it is by measuring the DOM Rect (or dimensions)\n * of the active tab, and return that as CSS style for\n * the indicator.\n */\nexport function useTabIndicator(): React.CSSProperties {\n  const context = useTabsContext()\n\n  const { selectedIndex, orientation, domContext } = context\n\n  const isHorizontal = orientation === \"horizontal\"\n  const isVertical = orientation === \"vertical\"\n\n  // Get the clientRect of the selected tab\n  const [rect, setRect] = React.useState(() => {\n    if (isHorizontal) return { left: 0, width: 0 }\n    if (isVertical) return { top: 0, height: 0 }\n    return undefined\n  })\n\n  const [hasMeasured, setHasMeasured] = React.useState(false)\n\n  // Update the selected tab rect when the selectedIndex changes\n  useSafeLayoutEffect(() => {\n    if (isUndefined(selectedIndex)) return undefined\n\n    const tab = domContext.descendants[selectedIndex]\n    const tabRect = tab?.element?.getBoundingClientRect()\n\n    // Horizontal Tab: Calculate width and left distance\n    if (isHorizontal && tabRect) {\n      const { left, width } = tabRect\n      setRect({ left, width })\n    }\n\n    // Vertical Tab: Calculate height and top distance\n    if (isVertical && tabRect) {\n      const { top, height } = tabRect\n      setRect({ top, height })\n    }\n\n    // Prevent unwanted transition from 0 to measured rect\n    // by setting the measured state in the next tick\n    const id = requestAnimationFrame(() => {\n      setHasMeasured(true)\n    })\n\n    return () => {\n      if (id) {\n        cancelAnimationFrame(id)\n      }\n    }\n  }, [selectedIndex, isHorizontal, isVertical, domContext.descendants])\n\n  return {\n    position: \"absolute\",\n    transition: hasMeasured ? \"all 200ms cubic-bezier(0, 0, 0.2, 1)\" : \"none\",\n    ...rect,\n  }\n}\n\nfunction makeTabId(id: string, index: number) {\n  return `${id}--tab-${index}`\n}\n\nfunction makeTabPanelId(id: string, index: number) {\n  return `${id}--tabpanel-${index}`\n}\n"],"file":"use-tabs.js"}